/*
 *  @author  Mahsa Noroozi
 */
//---------------------------------------------------------------------------------------------------------------------
/*  The "Solve" class solves multi commodity flow problems in linear programming using a simplex algorithm.
 *  This class uses Graphx to represent a random network with nodes and edges.
 *  The constraints of MCF are produced automatically from the nodes and edge capacities in another class: SolveMCF.
 *  We assume the graph fully connected.
 *  Source and destination are clearly defined.
 */
//---------------------------------------------------------------------------------------------------------------------
package org.apache.spark.mllib.optimization.mip.lp

import scala.math.abs
import scala.util.control.Breaks.{breakable, break}

import org.apache.spark.{SparkContext, SparkConf}
import org.apache.spark.graphx._
import org.apache.spark.rdd._
import org.apache.spark.graphx.lib

object SolveExample8of20 extends Serializable {

        def main(args: Array[String]): Unit = {
                val conf = new SparkConf().setAppName("Solve MCF 5 of 20 with Simplex")
                val sc = new SparkContext(conf)

		val t1 = System.nanoTime
                // --------------------Define the substrate network using nodes and edges------------------------------
                var svertexArray = Array((1L,("1",1)),(2L,("2",4)),(3L,("3",4)),(4L,("4",5)),(5L,("5",2)),(6L,("6",8)),(7L,("7",1)),(8L,("8",8)),(9L,("9",3)),(10L,("10",7)),(11L,("11",9)),(12L,("12",3)),(13L,("13",6)),(14L,("14",8)),(15L,("15",8)),(16L,("16",7)),(17L,("17",5)),(18L,("18",8)),(19L,("19",8)),(20L,("20",5)))
                val svertexRDD: RDD[(VertexId, (String, Int))] = sc.parallelize(svertexArray)

                var sedgeArray = Array(	Edge(1,2,(3,1000)),
Edge(1,3,(1,1000)),
Edge(1,4,(9,1000)),
Edge(1,5,(4,1000)),
Edge(1,6,(3,1000)),
Edge(1,7,(9,1000)),
Edge(1,8,(8,1000)),
Edge(1,9,(10,1000)),
Edge(1,10,(2,1000)),
Edge(1,11,(5,1000)),
Edge(1,12,(3,1000)),
Edge(1,13,(5,1000)),
Edge(1,14,(1,1000)),
Edge(1,15,(3,1000)),
Edge(1,16,(2,1000)),
Edge(1,17,(2,1000)),
Edge(1,18,(8,1000)),
Edge(1,19,(4,1000)),
Edge(1,20,(8,1000)),
Edge(2,1,(3,1000)),
Edge(2,3,(3,1000)),
Edge(2,4,(5,1000)),
Edge(2,5,(9,1000)),
Edge(2,6,(10,1000)),
Edge(2,7,(4,1000)),
Edge(2,8,(4,1000)),
Edge(2,9,(7,1000)),
Edge(2,10,(5,1000)),
Edge(2,11,(7,1000)),
Edge(2,12,(1,1000)),
Edge(2,13,(8,1000)),
Edge(2,14,(5,1000)),
Edge(2,15,(7,1000)),
Edge(2,16,(9,1000)),
Edge(2,17,(8,1000)),
Edge(2,18,(5,1000)),
Edge(2,19,(3,1000)),
Edge(2,20,(7,1000)),
Edge(3,1,(1,1000)),
Edge(3,2,(3,1000)),
Edge(3,4,(1,1000)),
Edge(3,5,(5,1000)),
Edge(3,6,(4,1000)),
Edge(3,7,(2,1000)),
Edge(3,8,(10,1000)),
Edge(3,9,(10,1000)),
Edge(3,10,(4,1000)),
Edge(3,11,(9,1000)),
Edge(3,12,(7,1000)),
Edge(3,13,(3,1000)),
Edge(3,14,(9,1000)),
Edge(3,15,(8,1000)),
Edge(3,16,(10,1000)),
Edge(3,17,(4,1000)),
Edge(3,18,(6,1000)),
Edge(3,19,(5,1000)),
Edge(3,20,(7,1000)),
Edge(4,1,(9,1000)),
Edge(4,2,(5,1000)),
Edge(4,3,(1,1000)),
Edge(4,5,(5,1000)),
Edge(4,6,(8,1000)),
Edge(4,7,(7,1000)),
Edge(4,8,(3,1000)),
Edge(4,9,(9,1000)),
Edge(4,10,(3,1000)),
Edge(4,11,(6,1000)),
Edge(4,12,(8,1000)),
Edge(4,13,(5,1000)),
Edge(4,14,(3,1000)),
Edge(4,15,(7,1000)),
Edge(4,16,(7,1000)),
Edge(4,17,(10,1000)),
Edge(4,18,(3,1000)),
Edge(4,19,(6,1000)),
Edge(4,20,(9,1000)),
Edge(5,1,(4,1000)),
Edge(5,2,(9,1000)),
Edge(5,3,(5,1000)),
Edge(5,4,(5,1000)),
Edge(5,6,(2,1000)),
Edge(5,7,(2,1000)),
Edge(5,8,(10,1000)),
Edge(5,9,(9,1000)),
Edge(5,10,(7,1000)),
Edge(5,11,(8,1000)),
Edge(5,12,(4,1000)),
Edge(5,13,(8,1000)),
Edge(5,14,(10,1000)),
Edge(5,15,(6,1000)),
Edge(5,16,(10,1000)),
Edge(5,17,(5,1000)),
Edge(5,18,(4,1000)),
Edge(5,19,(6,1000)),
Edge(5,20,(10,1000)),
Edge(6,1,(3,1000)),
Edge(6,2,(10,1000)),
Edge(6,3,(4,1000)),
Edge(6,4,(8,1000)),
Edge(6,5,(2,1000)),
Edge(6,7,(6,1000)),
Edge(6,8,(7,1000)),
Edge(6,9,(9,1000)),
Edge(6,10,(3,1000)),
Edge(6,11,(5,1000)),
Edge(6,12,(2,1000)),
Edge(6,13,(9,1000)),
Edge(6,14,(9,1000)),
Edge(6,15,(1,1000)),
Edge(6,16,(6,1000)),
Edge(6,17,(6,1000)),
Edge(6,18,(8,1000)),
Edge(6,19,(3,1000)),
Edge(6,20,(10,1000)),
Edge(7,1,(9,1000)),
Edge(7,2,(4,1000)),
Edge(7,3,(2,1000)),
Edge(7,4,(7,1000)),
Edge(7,5,(2,1000)),
Edge(7,6,(6,1000)),
Edge(7,8,(2,1000)),
Edge(7,9,(3,1000)),
Edge(7,10,(5,1000)),
Edge(7,11,(1,1000)),
Edge(7,12,(3,1000)),
Edge(7,13,(4,1000)),
Edge(7,14,(10,1000)),
Edge(7,15,(10,1000)),
Edge(7,16,(2,1000)),
Edge(7,17,(5,1000)),
Edge(7,18,(9,1000)),
Edge(7,19,(4,1000)),
Edge(7,20,(3,1000)),
Edge(8,1,(8,1000)),
Edge(8,2,(4,1000)),
Edge(8,3,(10,1000)),
Edge(8,4,(3,1000)),
Edge(8,5,(10,1000)),
Edge(8,6,(7,1000)),
Edge(8,7,(2,1000)),
Edge(8,9,(2,1000)),
Edge(8,10,(6,1000)),
Edge(8,11,(4,1000)),
Edge(8,12,(5,1000)),
Edge(8,13,(5,1000)),
Edge(8,14,(1,1000)),
Edge(8,15,(2,1000)),
Edge(8,16,(9,1000)),
Edge(8,17,(7,1000)),
Edge(8,18,(7,1000)),
Edge(8,19,(9,1000)),
Edge(8,20,(8,1000)),
Edge(9,1,(10,1000)),
Edge(9,2,(7,1000)),
Edge(9,3,(10,1000)),
Edge(9,4,(9,1000)),
Edge(9,5,(9,1000)),
Edge(9,6,(9,1000)),
Edge(9,7,(3,1000)),
Edge(9,8,(2,1000)),
Edge(9,10,(7,1000)),
Edge(9,11,(4,1000)),
Edge(9,12,(8,1000)),
Edge(9,13,(4,1000)),
Edge(9,14,(5,1000)),
Edge(9,15,(10,1000)),
Edge(9,16,(6,1000)),
Edge(9,17,(10,1000)),
Edge(9,18,(8,1000)),
Edge(9,19,(10,1000)),
Edge(9,20,(9,1000)),
Edge(10,1,(2,1000)),
Edge(10,2,(5,1000)),
Edge(10,3,(4,1000)),
Edge(10,4,(3,1000)),
Edge(10,5,(7,1000)),
Edge(10,6,(3,1000)),
Edge(10,7,(5,1000)),
Edge(10,8,(6,1000)),
Edge(10,9,(7,1000)),
Edge(10,11,(10,1000)),
Edge(10,12,(5,1000)),
Edge(10,13,(8,1000)),
Edge(10,14,(9,1000)),
Edge(10,15,(10,1000)),
Edge(10,16,(6,1000)),
Edge(10,17,(5,1000)),
Edge(10,18,(2,1000)),
Edge(10,19,(7,1000)),
Edge(10,20,(1,1000)),
Edge(11,1,(5,1000)),
Edge(11,2,(7,1000)),
Edge(11,3,(9,1000)),
Edge(11,4,(6,1000)),
Edge(11,5,(8,1000)),
Edge(11,6,(5,1000)),
Edge(11,7,(1,1000)),
Edge(11,8,(4,1000)),
Edge(11,9,(4,1000)),
Edge(11,10,(10,1000)),
Edge(11,12,(7,1000)),
Edge(11,13,(5,1000)),
Edge(11,14,(3,1000)),
Edge(11,15,(8,1000)),
Edge(11,16,(3,1000)),
Edge(11,17,(4,1000)),
Edge(11,18,(9,1000)),
Edge(11,19,(8,1000)),
Edge(11,20,(6,1000)),
Edge(12,1,(3,1000)),
Edge(12,2,(1,1000)),
Edge(12,3,(7,1000)),
Edge(12,4,(8,1000)),
Edge(12,5,(4,1000)),
Edge(12,6,(2,1000)),
Edge(12,7,(3,1000)),
Edge(12,8,(5,1000)),
Edge(12,9,(8,1000)),
Edge(12,10,(5,1000)),
Edge(12,11,(7,1000)),
Edge(12,13,(6,1000)),
Edge(12,14,(1,1000)),
Edge(12,15,(2,1000)),
Edge(12,16,(2,1000)),
Edge(12,17,(7,1000)),
Edge(12,18,(1,1000)),
Edge(12,19,(5,1000)),
Edge(12,20,(1,1000)),
Edge(13,1,(5,1000)),
Edge(13,2,(8,1000)),
Edge(13,3,(3,1000)),
Edge(13,4,(5,1000)),
Edge(13,5,(8,1000)),
Edge(13,6,(9,1000)),
Edge(13,7,(4,1000)),
Edge(13,8,(5,1000)),
Edge(13,9,(4,1000)),
Edge(13,10,(8,1000)),
Edge(13,11,(5,1000)),
Edge(13,12,(6,1000)),
Edge(13,14,(6,1000)),
Edge(13,15,(10,1000)),
Edge(13,16,(10,1000)),
Edge(13,17,(10,1000)),
Edge(13,18,(5,1000)),
Edge(13,19,(6,1000)),
Edge(13,20,(7,1000)),
Edge(14,1,(1,1000)),
Edge(14,2,(5,1000)),
Edge(14,3,(9,1000)),
Edge(14,4,(3,1000)),
Edge(14,5,(10,1000)),
Edge(14,6,(9,1000)),
Edge(14,7,(10,1000)),
Edge(14,8,(1,1000)),
Edge(14,9,(5,1000)),
Edge(14,10,(9,1000)),
Edge(14,11,(3,1000)),
Edge(14,12,(1,1000)),
Edge(14,13,(6,1000)),
Edge(14,15,(4,1000)),
Edge(14,16,(6,1000)),
Edge(14,17,(8,1000)),
Edge(14,18,(4,1000)),
Edge(14,19,(1,1000)),
Edge(14,20,(2,1000)),
Edge(15,1,(3,1000)),
Edge(15,2,(7,1000)),
Edge(15,3,(8,1000)),
Edge(15,4,(7,1000)),
Edge(15,5,(6,1000)),
Edge(15,6,(1,1000)),
Edge(15,7,(10,1000)),
Edge(15,8,(2,1000)),
Edge(15,9,(10,1000)),
Edge(15,10,(10,1000)),
Edge(15,11,(8,1000)),
Edge(15,12,(2,1000)),
Edge(15,13,(10,1000)),
Edge(15,14,(4,1000)),
Edge(15,16,(5,1000)),
Edge(15,17,(3,1000)),
Edge(15,18,(8,1000)),
Edge(15,19,(2,1000)),
Edge(15,20,(9,1000)),
Edge(16,1,(2,1000)),
Edge(16,2,(9,1000)),
Edge(16,3,(10,1000)),
Edge(16,4,(7,1000)),
Edge(16,5,(10,1000)),
Edge(16,6,(6,1000)),
Edge(16,7,(2,1000)),
Edge(16,8,(9,1000)),
Edge(16,9,(6,1000)),
Edge(16,10,(6,1000)),
Edge(16,11,(3,1000)),
Edge(16,12,(2,1000)),
Edge(16,13,(10,1000)),
Edge(16,14,(6,1000)),
Edge(16,15,(5,1000)),
Edge(16,17,(8,1000)),
Edge(16,18,(4,1000)),
Edge(16,19,(9,1000)),
Edge(16,20,(10,1000)),
Edge(17,1,(2,1000)),
Edge(17,2,(8,1000)),
Edge(17,3,(4,1000)),
Edge(17,4,(10,1000)),
Edge(17,5,(5,1000)),
Edge(17,6,(6,1000)),
Edge(17,7,(5,1000)),
Edge(17,8,(7,1000)),
Edge(17,9,(10,1000)),
Edge(17,10,(5,1000)),
Edge(17,11,(4,1000)),
Edge(17,12,(7,1000)),
Edge(17,13,(10,1000)),
Edge(17,14,(8,1000)),
Edge(17,15,(3,1000)),
Edge(17,16,(8,1000)),
Edge(17,18,(3,1000)),
Edge(17,19,(5,1000)),
Edge(17,20,(3,1000)),
Edge(18,1,(8,1000)),
Edge(18,2,(5,1000)),
Edge(18,3,(6,1000)),
Edge(18,4,(3,1000)),
Edge(18,5,(4,1000)),
Edge(18,6,(8,1000)),
Edge(18,7,(9,1000)),
Edge(18,8,(7,1000)),
Edge(18,9,(8,1000)),
Edge(18,10,(2,1000)),
Edge(18,11,(9,1000)),
Edge(18,12,(1,1000)),
Edge(18,13,(5,1000)),
Edge(18,14,(4,1000)),
Edge(18,15,(8,1000)),
Edge(18,16,(4,1000)),
Edge(18,17,(3,1000)),
Edge(18,19,(10,1000)),
Edge(18,20,(7,1000)),
Edge(19,1,(4,1000)),
Edge(19,2,(3,1000)),
Edge(19,3,(5,1000)),
Edge(19,4,(6,1000)),
Edge(19,5,(6,1000)),
Edge(19,6,(3,1000)),
Edge(19,7,(4,1000)),
Edge(19,8,(9,1000)),
Edge(19,9,(10,1000)),
Edge(19,10,(7,1000)),
Edge(19,11,(8,1000)),
Edge(19,12,(5,1000)),
Edge(19,13,(6,1000)),
Edge(19,14,(1,1000)),
Edge(19,15,(2,1000)),
Edge(19,16,(9,1000)),
Edge(19,17,(5,1000)),
Edge(19,18,(10,1000)),
Edge(19,20,(8,1000)),
Edge(20,1,(8,1000)),
Edge(20,2,(7,1000)),
Edge(20,3,(7,1000)),
Edge(20,4,(9,1000)),
Edge(20,5,(10,1000)),
Edge(20,6,(10,1000)),
Edge(20,7,(3,1000)),
Edge(20,8,(8,1000)),
Edge(20,9,(9,1000)),
Edge(20,10,(1,1000)),
Edge(20,11,(6,1000)),
Edge(20,12,(1,1000)),
Edge(20,13,(7,1000)),
Edge(20,14,(2,1000)),
Edge(20,15,(9,1000)),
Edge(20,16,(10,1000)),
Edge(20,17,(3,1000)),
Edge(20,18,(7,1000)),
Edge(20,19,(8,1000)))
		val sedgeRDD: RDD[Edge[(Int,Int)]] = sc.parallelize(sedgeArray)
		val gs: Graph[(String, Int), (Int, Int)] = Graph(svertexRDD, sedgeRDD)

		var vvertexArray = Array((1L,("1",7)),(2L,("2",3)),(3L,("3",2)),(4L,("4",4)),(5L,("5",4)),(6L,("6",0)),(7L,("7",4)),(8L,("8",6)))
		val vvertexRDD: RDD[(VertexId, (String, Int))] = sc.parallelize(vvertexArray)	

		var vedgeArray = Array( Edge(1,2,(3,1000)),
Edge(1,3,(7,1000)),
Edge(1,4,(4,1000)),
Edge(1,5,(8,1000)),
Edge(1,6,(4,1000)),
Edge(1,7,(3,1000)),
Edge(1,8,(9,1000)),
Edge(2,1,(3,1000)),
Edge(2,3,(2,1000)),
Edge(2,4,(8,1000)),
Edge(2,5,(10,1000)),
Edge(2,6,(1,1000)),
Edge(2,7,(7,1000)),
Edge(2,8,(3,1000)),
Edge(3,1,(7,1000)),
Edge(3,2,(2,1000)),
Edge(3,4,(4,1000)),
Edge(3,5,(9,1000)),
Edge(3,6,(1,1000)),
Edge(3,7,(7,1000)),
Edge(3,8,(6,1000)),
Edge(4,1,(4,1000)),
Edge(4,2,(8,1000)),
Edge(4,3,(4,1000)),
Edge(4,5,(3,1000)),
Edge(4,6,(8,1000)),
Edge(4,7,(9,1000)),
Edge(4,8,(3,1000)),
Edge(5,1,(8,1000)),
Edge(5,2,(10,1000)),
Edge(5,3,(9,1000)),
Edge(5,4,(3,1000)),
Edge(5,6,(5,1000)),
Edge(5,7,(9,1000)),
Edge(5,8,(4,1000)),
Edge(6,1,(4,1000)),
Edge(6,2,(1,1000)),
Edge(6,3,(1,1000)),
Edge(6,4,(8,1000)),
Edge(6,5,(5,1000)),
Edge(6,7,(1,1000)),
Edge(6,8,(8,1000)),
Edge(7,1,(3,1000)),
Edge(7,2,(7,1000)),
Edge(7,3,(7,1000)),
Edge(7,4,(9,1000)),
Edge(7,5,(9,1000)),
Edge(7,6,(1,1000)),
Edge(7,8,(6,1000)),
Edge(8,1,(9,1000)),
Edge(8,2,(3,1000)),
Edge(8,3,(6,1000)),
Edge(8,4,(3,1000)),
Edge(8,5,(4,1000)),
Edge(8,6,(8,1000)),
Edge(8,7,(6,1000)))
		val vedgeRDD: RDD[Edge[(Int,Int)]] = sc.parallelize(vedgeArray)
                val gv: Graph[(String, Int), (Int, Int)] = Graph(vvertexRDD, vedgeRDD)

		// --------------------Define Source and Destination----------------------------------------------------
		val Source = (14, 6)
		val Destination = (4, 1)

		val lp = new SolveMCF3(gs, gv, Source, Destination, sc=sc)
		val f = lp.SolveMCFinLPResult()

		println("Optimal Solution = " + f)
		val duration = (System.nanoTime - t1) / 1e9d
		println("Duration: " + duration)
	}
}
		
